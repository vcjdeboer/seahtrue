[{"path":"https://vcjdeboer.github.io/seahtrue/articles/inspect.html","id":"inspect-the-revived-data","dir":"Articles","previous_headings":"","what":"Inspect the revived data","title":"Inspect","text":"Take glimpse generated data revive_xfplate() function: data starts 4 columns identifiers. plate_id, filepath_seahorse, date_run date_processed, keeps data easily traceable ids top level. , 5 columns nested tibbles follow. assay_info column contains tibble/dataframe information stored experimental file. either information user put software running experiment, running software processing data, generated software. next colum injection_info containing measurement, interval injection. two data columns raw_data rate_data listed tibble/dataframe. final column validation_output output validations well rules. next sections, explore data output separately.","code":"revive_output_donor_A %>%     dplyr::glimpse() #> Rows: 1 #> Columns: 9 #> $ plate_id          <chr> \"V0174416419V\" #> $ filepath_seahorse <list> [<tbl_df[1 x 3]>] #> $ date_run          <chr> \"19-12-2019 17:25\" #> $ date_processed    <dttm> 2024-04-15 19:39:40 #> $ assay_info        <list> [<tbl_df[1 x 24]>] #> $ injection_info    <list> [<tbl_df[12 x 3]>] #> $ raw_data          <list> [<tbl_df[13824 x 21]>] #> $ rate_data         <list> [<tbl_df[1140 x 10]>] #> $ validation_output <list> [TRUE, TRUE, [<tbl_df[12 x 10]>], [<tbl_df[13824 x 4…"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/inspect.html","id":"rate-data","dir":"Articles","previous_headings":"Inspect the revived data","what":"Rate data","title":"Inspect","text":"rate_data scientist typically use interpretation XF experiments. contains calculated OCR (oxygen consumption rate) ECAR (extracellular acidification rate) values, together PER (proton efflux rate). PER calculated ECAR buffer capacity known set experiment. rate_data OCR ECAR data, since PER can easily calculated. rate_data well,measurement, group identifiers row followed time_wave column provides time measurement minutes, OCR ECAR data columns. Also cell_n flagged_well status joined dataframe. provides information exploring plotting data. Since OCR ECAR data can exported either background , read functions seahtrue package determine whether OCR ECAR background corrected , based whether Background wells OCR zero. data corrected background OCR corrected reading .xlsx file. background corrected data given OCR_wave_bc ECAR_wave_bc. data exported without background correction OCR_wave ECAR_wave data columns contain non corrected OCR ECAR.","code":"revive_output_donor_A %>%     purrr::pluck(\"rate_data\", 1) #> # A tibble: 1,140 × 10 #>    measurement well  group time_wave OCR_wave OCR_wave_bc ECAR_wave ECAR_wave_bc #>          <dbl> <chr> <chr>     <dbl>    <dbl>       <dbl>     <dbl>        <dbl> #>  1           1 A01   Back…      1.31        0        0            0         0    #>  2           1 A02   50.0…      1.31        0        6.22         0         2.90 #>  3           1 A03   100.…      1.31        0       26.6          0         5.87 #>  4           1 A04   100.…      1.31        0       21.4          0         4.40 #>  5           1 A05   150.…      1.31        0        3.08         0        12.4  #>  6           1 A06   200.…      1.31        0       41.1          0         8.98 #>  7           1 A07   150.…      1.31        0       39.5          0         9.27 #>  8           1 A08   200.…      1.31        0       40.4          0         4.75 #>  9           1 A09   250.…      1.31        0       58.8          0         7.39 #> 10           1 A10   250.…      1.31        0       59.4          0         6.88 #> # ℹ 1,130 more rows #> # ℹ 2 more variables: cell_n <dbl>, flagged_well <lgl>"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/inspect.html","id":"raw-data","dir":"Articles","previous_headings":"Inspect the revived data","what":"Raw data","title":"Inspect","text":"raw_data tibble contains raw data collected XF experiment. essential data can give detailed insights quality assay. Apart data presented raw data sheet .xlsx, preprocessing output given. timescale seconds (timescale) minutes (minutes), well interval injection id. Also, background corrected raw data values pH, O2 emissions given. , just like rate_data tibble, cell_n flagged_well status given.","code":"revive_output_donor_A %>%     purrr::pluck(\"raw_data\", 1) #> # A tibble: 13,824 × 21 #>    well  measurement  tick timescale minutes group interval injection O2_em_corr #>    <chr>       <dbl> <dbl>     <dbl>   <dbl> <chr>    <dbl> <chr>          <dbl> #>  1 A01             1     0         0       0 Back…        1 Baseline      12422. #>  2 A02             1     0         0       0 50.0…        1 Baseline      12323. #>  3 A03             1     0         0       0 100.…        1 Baseline      12483. #>  4 A04             1     0         0       0 100.…        1 Baseline      12362. #>  5 A05             1     0         0       0 150.…        1 Baseline      12103. #>  6 A06             1     0         0       0 200.…        1 Baseline      12274. #>  7 A07             1     0         0       0 150.…        1 Baseline      12354. #>  8 A08             1     0         0       0 200.…        1 Baseline      12325. #>  9 A09             1     0         0       0 250.…        1 Baseline      12347. #> 10 A10             1     0         0       0 250.…        1 Baseline      12209. #> # ℹ 13,814 more rows #> # ℹ 12 more variables: pH_em_corr <dbl>, O2_mmHg <dbl>, pH <dbl>, #> #   pH_em_corr_corr <dbl>, O2_em_corr_bkg <dbl>, pH_em_corr_bkg <dbl>, #> #   O2_mmHg_bkg <dbl>, pH_bkgd <dbl>, pH_em_corr_corr_bkg <dbl>, #> #   bufferfactor <dbl>, cell_n <dbl>, flagged_well <lgl>"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/inspect.html","id":"assay-info","dir":"Articles","previous_headings":"Inspect the revived data","what":"Assay info","title":"Inspect","text":"assay_info information user software provided meta data associated experiment plate. example, barcode cartridge used: XF analyzer reads cartridge barcode associated assay. information barcode software uses OCR calculation. emission fluorescent O2 sensors zero oxygen F0 (see Gerencser et al. (2009) Quantitative microplate-based respirometry correction oxygen diffusion. Anal Chem 81:6868, details) derived Stern-Volmer constant KSV. emission ambient oxygen typically set 12500 AU ambient oxygen levels wells culture medium set 151.6900241 mmHg. Apart user software generated meta info, functions seahtrue package also put relevant info tibble. time start actual measurements (minutes_to_start_measurement_one), shows long user took insert cell plate start running measurements. timer starts t = 0 minutes cartridge calibrated user. Apart assay_info can meta info associated data tibbles form attributes. can also viewed shown following examples:","code":"revive_output_donor_A %>%     purrr::pluck(\"assay_info\", 1) %>%    pull(cartridge_barcode) #> [1] \"W0013917519B**+405-6+101-2300F+240-2***000A+219-4**+450-1125&\" # KSV in barcode revive_output_donor_A %>%     purrr::pluck(\"assay_info\", 1) %>%    pull(cartridge_barcode) %>%    stringr::str_sub(-18, -13) #> [1] \"+219-4\"    # KSV in assay info sheet revive_output_donor_A %>%     purrr::pluck(\"assay_info\", 1) %>%    pull(KSV)  #> [1] 0.0219  # F0 can be calculated using the stern-volmer equation # and the info  # emission target at ambient O2 = 12500 # O2 level at ambient in sample medium in well = 151.69 # # F0/F = 1 + KSV*O2 # F0 = (1+KSV*O2)*F # F0 = (1+ KSV*151.69)*12500  # F0 from assay info sheet revive_output_donor_A %>%     purrr::pluck(\"assay_info\", 1) %>%    pull(F0)  #> [1] 54025.14 revive_output_donor_A %>%     purrr::pluck(\"assay_info\", 1) %>%    pull(minutes_to_start_measurement_one) #> [1] 37.23333 revive_output_donor_A %>%     purrr::pluck(\"rate_data\", 1) %>% str() #> tibble [1,140 × 10] (S3: tbl_df/tbl/data.frame) #>  $ measurement : num [1:1140] 1 1 1 1 1 1 1 1 1 1 ... #>  $ well        : chr [1:1140] \"A01\" \"A02\" \"A03\" \"A04\" ... #>  $ group       : chr [1:1140] \"Background\" \"50.000\" \"100.000\" \"100.000\" ... #>  $ time_wave   : num [1:1140] 1.31 1.31 1.31 1.31 1.31 ... #>  $ OCR_wave    : num [1:1140] 0 0 0 0 0 0 0 0 0 0 ... #>  $ OCR_wave_bc : num [1:1140] 0 6.22 26.64 21.42 3.08 ... #>  $ ECAR_wave   : num [1:1140] 0 0 0 0 0 0 0 0 0 0 ... #>  $ ECAR_wave_bc: num [1:1140] 0 2.9 5.87 4.4 12.36 ... #>  $ cell_n      : num [1:1140] 0 32472 114732 83567 153510 ... #>  $ flagged_well: logi [1:1140] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  - attr(*, \"was_background_corrected\")= logi TRUE revive_output_donor_A %>%       purrr::pluck(\"rate_data\", 1) %>%      attributes() %>%      purrr::pluck(\"was_background_corrected\") #> [1] TRUE"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/inspect.html","id":"injection-info","dir":"Articles","previous_headings":"Inspect the revived data","what":"Injection info","title":"Inspect","text":"Since every XF experiment uses pertubations chemicals nutrients injection_info important interpretation experiment. injection info can plucked data tibble.","code":"revive_output_donor_A %>%       purrr::pluck(\"injection_info\", 1) #> # A tibble: 12 × 3 #>    measurement interval injection        #>          <int>    <dbl> <chr>            #>  1           1        1 Baseline         #>  2           2        1 Baseline         #>  3           3        1 Baseline         #>  4           4        2 FCCP             #>  5           5        2 FCCP             #>  6           6        2 FCCP             #>  7           7        3 AM/ROT           #>  8           8        3 AM/ROT           #>  9           9        3 AM/ROT           #> 10          10        4 Monensin/Hoechst #> 11          11        4 Monensin/Hoechst #> 12          12        4 Monensin/Hoechst"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/inspect.html","id":"validation-output","dir":"Articles","previous_headings":"Inspect the revived data","what":"Validation output","title":"Inspect","text":"validation_output list described separate vignette.","code":" [1m [36m─ Session info ─────────────────────────────────────────────────────────────── [39m [22m   [3m [90msetting  [39m [23m  [3m [90mvalue [39m [23m  version  R version 4.3.3 (2024-02-29)  os       Ubuntu 22.04.4 LTS  system   x86_64, linux-gnu  ui       X11  language en  collate  C.UTF-8  ctype    C.UTF-8  tz       UTC  date     2024-04-24  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown)   [1m [36m─ Packages ─────────────────────────────────────────────────────────────────── [39m [22m   [3m [90mpackage     [39m [23m  [3m [90m* [39m [23m  [3m [90mversion [39m [23m  [3m [90mdate (UTC) [39m [23m  [3m [90mlib [39m [23m  [3m [90msource [39m [23m  bslib         0.7.0    [90m2024-03-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cachem        1.0.8    [90m2023-05-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cellranger    1.1.0    [90m2016-07-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cli           3.6.2    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  clipr         0.8.0    [90m2022-02-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  colorspace    2.1-0    [90m2023-01-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  desc          1.4.3    [90m2023-12-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  details       0.3.0    [90m2022-03-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  digest        0.6.35   [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  dplyr       * 1.1.4    [90m2023-11-17 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  evaluate      0.23     [90m2023-11-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fansi         1.0.6    [90m2023-12-08 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fastmap       1.1.1    [90m2023-02-24 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fs            1.6.3    [90m2023-07-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  generics      0.1.3    [90m2022-07-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ggplot2       3.5.0    [90m2024-02-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  glue          1.7.0    [90m2024-01-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  gtable        0.3.5    [90m2024-04-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  htmltools     0.5.8.1  [90m2024-04-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  httr          1.4.7    [90m2023-08-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  janitor       2.2.0    [90m2023-02-02 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jquerylib     0.1.4    [90m2021-04-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jsonlite      1.8.8    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  knitr         1.46     [90m2024-04-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lifecycle     1.0.4    [90m2023-11-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  logger        0.3.0    [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lubridate     1.9.3    [90m2023-09-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  magrittr      2.0.3    [90m2022-03-30 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  memoise       2.0.1    [90m2021-11-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  munsell       0.5.1    [90m2024-04-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pillar        1.9.0    [90m2023-03-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgconfig     2.0.3    [90m2019-09-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgdown       2.0.9    [90m2024-04-18 [39m  [90m[1] [39m  [1m [35many (@2.0.9) [39m [22m  png           0.1-8    [90m2022-11-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  purrr         1.0.2    [90m2023-08-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  R6            2.5.1    [90m2021-08-19 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ragg          1.3.0    [90m2024-03-13 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  Rcpp          1.0.12   [90m2024-01-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  readxl        1.4.3    [90m2023-07-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rlang         1.1.3    [90m2024-01-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rmarkdown     2.26     [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  sass          0.4.9    [90m2024-03-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  scales        1.3.0    [90m2023-11-28 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  seahtrue    * 0.3.0    [90m2024-04-24 [39m  [90m[1] [39m  [1m [35mlocal [39m [22m  sessioninfo   1.2.2    [90m2021-12-06 [39m  [90m[1] [39m  [1m [35many (@1.2.2) [39m [22m  settings      0.2.7    [90m2021-05-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  snakecase     0.11.1   [90m2023-08-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  stringi       1.8.3    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  stringr       1.5.1    [90m2023-11-14 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  systemfonts   1.0.6    [90m2024-03-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  textshaping   0.3.7    [90m2023-10-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tibble        3.2.1    [90m2023-03-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyselect    1.2.1    [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyxl        1.0.10   [90m2023-12-21 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  timechange    0.3.0    [90m2024-01-18 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  utf8          1.2.4    [90m2023-10-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  validate      1.1.5    [90m2024-02-14 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  vctrs         0.6.5    [90m2023-12-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  withr         3.0.0    [90m2024-01-16 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xfun          0.43     [90m2024-03-25 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xml2          1.3.6    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  yaml          2.3.8    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m   [90m [1] /home/runner/work/_temp/Library [39m  [90m [2] /opt/R/4.3.3/lib/R/site-library [39m  [90m [3] /opt/R/4.3.3/lib/R/library [39m   [1m [36m────────────────────────────────────────────────────────────────────────────── [39m [22m"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/plot.html","id":"plate-maps","dir":"Articles","previous_headings":"","what":"Plate maps","title":"Plot","text":"Typically, scientists use multiple conditions 96 well plate set-. conditions labeled groups. group typically associated multiple wells. can plot plate map using sketch_plate() function.  Apart using build function common type plate map often needed, can build heatmap OCR data well. now use similar ggplot script sketch_plate() function adapt liking show OCR instead groups.  Furthermore, can annotate wells text well. example cell number:","code":"revive_output_donor_A %>%   purrr::pluck(\"raw_data\", 1)  %>%   sketch_plate(reorder_legend = TRUE) revive_output_donor_A %>%     purrr::pluck(\"rate_data\", 1) %>%      slice(1, .by = c(well)) %>%      tidyr::separate(well,                      into = c(\"row\", \"column\"),                      sep = 1,                       convert = TRUE) %>%      ggplot(aes(x = column, y = forcats::fct_rev(row))) +       geom_tile(aes(fill = OCR_wave_bc),                 color = \"grey50\",show.legend = TRUE)+       colorspace::scale_fill_continuous_sequential(         palette = \"YlGnBu\",          rev= TRUE,         name = \"OCR (pmol/min)\")+       scale_x_continuous(limits= c(0.5, 12.5),                         breaks = c(seq_len(12)),                         position = \"top\")+       theme_bw(base_size = 15) %+replace%          theme(panel.grid = element_blank(),               panel.border = element_blank(),               axis.ticks = element_line(),               axis.title = element_blank(),               axis.text.x = element_text(size = rel(1.3),                                           hjust = 0.5,                                          vjust = 0),               axis.text.y = element_text(size = rel(1.3),                                          hjust = 0.5,                                          vjust = 0.5),               legend.justification = c(0,1)) revive_output_donor_A %>%     purrr::pluck(\"rate_data\", 1) %>%      slice(1, .by = c(well)) %>%      tidyr::separate(well,                      into = c(\"row\", \"column\"),                      sep = 1,                       convert = TRUE) %>%      ggplot(aes(x = column, y = forcats::fct_rev(row))) +       geom_tile(aes(fill = OCR_wave_bc),                 color = \"grey50\",show.legend = TRUE)+       geom_text(aes(label = round(cell_n/100)), size = 2.5) +       colorspace::scale_fill_continuous_sequential(         palette = \"YlGnBu\",          rev= TRUE,         name = \"OCR (pmol/min)\")+       scale_x_continuous(limits= c(0.5, 12.5),                         breaks = c(seq_len(12)),                         position = \"top\")+       theme_bw(base_size = 15) %+replace%          theme(panel.grid = element_blank(),               panel.border = element_blank(),               axis.ticks = element_line(),               axis.title = element_blank(),               axis.text.x = element_text(size = rel(1.3),                                           hjust = 0.5,                                          vjust = 0),               axis.text.y = element_text(size = rel(1.3),                                          hjust = 0.5,                                          vjust = 0.5),               legend.justification = c(0,1))"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/plot.html","id":"rate-plot","dir":"Articles","previous_headings":"","what":"Rate plot","title":"Plot","text":"common plot often seen papers rate plot. shows time OCR (ECAR) traces per group time, demonstrating different phases (intervals) XF assay, basal, maximal non-mitochondrial OCR. sketch_rate() function can used . options explore . First, let’s plot OCR group assay time. Please note shaded area 50% middle quantiles generated R quantile function.  can also informative observe OCR individual well. used spot technical outliers. Since XF data needs properly normalized cell number well, option can selected. cell numbers provided original .xlsx input file, cell_n column contains normalization values:  Similar plots can generated ECAR.  single wells:","code":"revive_output_donor_A %>%   purrr::pluck(\"rate_data\", 1)  %>%   sketch_rate(reorder_legend = TRUE) revive_output_donor_A %>%   purrr::pluck(\"rate_data\", 1)  %>%   sketch_rate(reorder_legend = TRUE,               take_group_mean = FALSE) revive_output_donor_A %>%   purrr::pluck(\"rate_data\", 1)  %>%   sketch_rate(param = \"OCR\",               reorder_legend = TRUE,               take_group_mean = TRUE,               normalize = TRUE,               normalize_unit = \"1000\") revive_output_donor_A %>%   purrr::pluck(\"rate_data\", 1)  %>%   sketch_rate(param = \"ECAR\",               reorder_legend = TRUE,               take_group_mean = TRUE,               normalize = TRUE,               normalize_unit = \"1000\") revive_output_donor_A %>%   purrr::pluck(\"rate_data\", 1)  %>%   sketch_rate(param = \"ECAR\",               reorder_legend = TRUE,               take_group_mean = FALSE,               normalize = TRUE,               normalize_unit = \"1000\")"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/plot.html","id":"multiple-plates","dir":"Articles","previous_headings":"","what":"Multiple plates","title":"Plot","text":"able inspect, compare, visulaize multiple plates glue_xfplates() function can used. reads either path folder vector strings containing full file path .xlsx XF files. argument folder path arg_is_folder argument TRUE, vector FALSE. Next, can unnest particular data tibbles, combines data three plates one tibble. sketch_assimilate_rate() function plots OCR specific measurements given my_measurements argument well. three different plates faceted separate panels. plate barcode given facet title. Also dots (representing well) colored based interval XF experiment. information comes injection_info tibble. demo data first interval initial OCR, second interval FCCP-induced OCR third fourth interval antimycin/rotenone induced OCR.  similar plot can generated ECAR:  Also, plot measurements belonging initial ECAR final ECAR changing my_measurements vector. shows initial maximal ECAR group three plates combined.","code":"my_filepath_vector <-    c(system.file(\"extdata\",       \"20191219_SciRep_PBMCs_donor_A.xlsx\",        package = \"seahtrue\"),     system.file(\"extdata\",       \"20200110_SciRep_PBMCs_donor_B.xlsx\",        package = \"seahtrue\"),    system.file(\"extdata\",       \"20200110_SciRep_PBMCs_donor_C.xlsx\",        package = \"seahtrue\"))    revived_donors <-      my_filepath_vector %>%       glue_xfplates(arg_is_folder = FALSE) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data #> → Start function to read seahorse plate data from Excel file: #> 20200110_SciRep_PBMCs_donor_B.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0194115019V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data #> → Start function to read seahorse plate data from Excel file: #> 20200110_SciRep_PBMCs_donor_C.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0194715019V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data   revived_donors #> # A tibble: 3 × 9 #>   plate_id     filepath_seahorse date_run         date_processed      assay_info #>   <chr>        <list>            <chr>            <dttm>              <list>     #> 1 V0174416419V <tibble [1 × 3]>  19-12-2019 17:25 2024-04-24 08:29:17 <tibble>   #> 2 V0194115019V <tibble [1 × 3]>  10-1-2020 16:59  2024-04-24 08:29:28 <tibble>   #> 3 V0194715019V <tibble [1 × 3]>  15-1-2020 17:26  2024-04-24 08:29:39 <tibble>   #> # ℹ 4 more variables: injection_info <list>, raw_data <list>, rate_data <list>, #> #   validation_output <list> revived_donors %>%    select(plate_id, \"raw_data\") %>%    tidyr::unnest(raw_data) #> # A tibble: 41,472 × 22 #>    plate_id   well  measurement  tick timescale minutes group interval injection #>    <chr>      <chr>       <dbl> <dbl>     <dbl>   <dbl> <chr>    <dbl> <chr>     #>  1 V01744164… A01             1     0         0       0 Back…        1 Baseline  #>  2 V01744164… A02             1     0         0       0 50.0…        1 Baseline  #>  3 V01744164… A03             1     0         0       0 100.…        1 Baseline  #>  4 V01744164… A04             1     0         0       0 100.…        1 Baseline  #>  5 V01744164… A05             1     0         0       0 150.…        1 Baseline  #>  6 V01744164… A06             1     0         0       0 200.…        1 Baseline  #>  7 V01744164… A07             1     0         0       0 150.…        1 Baseline  #>  8 V01744164… A08             1     0         0       0 200.…        1 Baseline  #>  9 V01744164… A09             1     0         0       0 250.…        1 Baseline  #> 10 V01744164… A10             1     0         0       0 250.…        1 Baseline  #> # ℹ 41,462 more rows #> # ℹ 13 more variables: O2_em_corr <dbl>, pH_em_corr <dbl>, O2_mmHg <dbl>, #> #   pH <dbl>, pH_em_corr_corr <dbl>, O2_em_corr_bkg <dbl>, #> #   pH_em_corr_bkg <dbl>, O2_mmHg_bkg <dbl>, pH_bkgd <dbl>, #> #   pH_em_corr_corr_bkg <dbl>, bufferfactor <dbl>, cell_n <dbl>, #> #   flagged_well <lgl> revived_donors %>%    sketch_assimilate_rate(my_measurements = c(3,4,9,12)) revived_donors %>%    sketch_assimilate_rate(param = \"ECAR\",                          my_measurements = c(3,4,9,12)) revived_donors %>%    sketch_assimilate_rate(param = \"ECAR\",                          my_measurements = c(1,2,3, 10, 11, 12))"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/plot.html","id":"plot-multiple-plate-with-raw-data","dir":"Articles","previous_headings":"","what":"Plot multiple plate with raw data","title":"Plot","text":"combine raw data tibbles three plates, can get insights raw O2 pH levels. example, plotting first tick, whcih first point first measurement, well plate, distribution observed around target O2.  can done emission pH values example.","code":"revived_donors %>%    sketch_assimilate_raw(param = \"O2_mmHg\") #> Picking joint bandwidth of 0.934 revived_donors %>%    sketch_assimilate_raw(param = \"pH_em_corr\") #> Picking joint bandwidth of 114  [1m [36m─ Session info ─────────────────────────────────────────────────────────────── [39m [22m   [3m [90msetting  [39m [23m  [3m [90mvalue [39m [23m  version  R version 4.3.3 (2024-02-29)  os       Ubuntu 22.04.4 LTS  system   x86_64, linux-gnu  ui       X11  language en  collate  C.UTF-8  ctype    C.UTF-8  tz       UTC  date     2024-04-24  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown)   [1m [36m─ Packages ─────────────────────────────────────────────────────────────────── [39m [22m   [3m [90mpackage      [39m [23m  [3m [90m* [39m [23m  [3m [90mversion [39m [23m  [3m [90mdate (UTC) [39m [23m  [3m [90mlib [39m [23m  [3m [90msource [39m [23m  bslib          0.7.0    [90m2024-03-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cachem         1.0.8    [90m2023-05-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cellranger     1.1.0    [90m2016-07-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cli            3.6.2    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  clipr          0.8.0    [90m2022-02-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  colorspace     2.1-0    [90m2023-01-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  desc           1.4.3    [90m2023-12-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  details        0.3.0    [90m2022-03-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  digest         0.6.35   [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  dplyr        * 1.1.4    [90m2023-11-17 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  evaluate       0.23     [90m2023-11-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fansi          1.0.6    [90m2023-12-08 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  farver         2.1.1    [90m2022-07-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fastmap        1.1.1    [90m2023-02-24 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  forcats        1.0.0    [90m2023-01-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fs             1.6.3    [90m2023-07-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  generics       0.1.3    [90m2022-07-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ggplot2      * 3.5.0    [90m2024-02-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ggridges       0.5.6    [90m2024-01-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  glue           1.7.0    [90m2024-01-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  gtable         0.3.5    [90m2024-04-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  highr          0.10     [90m2022-12-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  hms            1.1.3    [90m2023-03-21 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  htmltools      0.5.8.1  [90m2024-04-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  httr           1.4.7    [90m2023-08-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  janitor        2.2.0    [90m2023-02-02 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jquerylib      0.1.4    [90m2021-04-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jsonlite       1.8.8    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  knitr          1.46     [90m2024-04-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  labeling       0.4.3    [90m2023-08-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lifecycle      1.0.4    [90m2023-11-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  logger         0.3.0    [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lubridate      1.9.3    [90m2023-09-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  magrittr       2.0.3    [90m2022-03-30 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  memoise        2.0.1    [90m2021-11-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  munsell        0.5.1    [90m2024-04-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pillar         1.9.0    [90m2023-03-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgconfig      2.0.3    [90m2019-09-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgdown        2.0.9    [90m2024-04-18 [39m  [90m[1] [39m  [1m [35many (@2.0.9) [39m [22m  png            0.1-8    [90m2022-11-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  purrr          1.0.2    [90m2023-08-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  R6             2.5.1    [90m2021-08-19 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ragg           1.3.0    [90m2024-03-13 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  RColorBrewer   1.1-3    [90m2022-04-03 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  Rcpp           1.0.12   [90m2024-01-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  readr          2.1.5    [90m2024-01-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  readxl         1.4.3    [90m2023-07-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rematch        2.0.0    [90m2023-08-30 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rlang          1.1.3    [90m2024-01-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rmarkdown      2.26     [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  sass           0.4.9    [90m2024-03-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  scales         1.3.0    [90m2023-11-28 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  seahtrue     * 0.3.0    [90m2024-04-24 [39m  [90m[1] [39m  [1m [35mlocal [39m [22m  sessioninfo    1.2.2    [90m2021-12-06 [39m  [90m[1] [39m  [1m [35many (@1.2.2) [39m [22m  settings       0.2.7    [90m2021-05-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  snakecase      0.11.1   [90m2023-08-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  stringi        1.8.3    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  stringr        1.5.1    [90m2023-11-14 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  systemfonts    1.0.6    [90m2024-03-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  textshaping    0.3.7    [90m2023-10-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tibble         3.2.1    [90m2023-03-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyr          1.3.1    [90m2024-01-24 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyselect     1.2.1    [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyxl         1.0.10   [90m2023-12-21 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  timechange     0.3.0    [90m2024-01-18 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tzdb           0.4.0    [90m2023-05-12 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  utf8           1.2.4    [90m2023-10-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  validate       1.1.5    [90m2024-02-14 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  vctrs          0.6.5    [90m2023-12-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  withr          3.0.0    [90m2024-01-16 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xfun           0.43     [90m2024-03-25 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xml2           1.3.6    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  yaml           2.3.8    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m   [90m [1] /home/runner/work/_temp/Library [39m  [90m [2] /opt/R/4.3.3/lib/R/site-library [39m  [90m [3] /opt/R/4.3.3/lib/R/library [39m   [1m [36m────────────────────────────────────────────────────────────────────────────── [39m [22m"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/revive.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Revive","text":"tidyverse pipe symbol seahtrue package used , load first.","code":"suppressPackageStartupMessages({   library(dplyr)   library(seahtrue) })  # in your own workflow you don't have to supresses messages  # off course, this is used here only for cleaner vignettes"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/revive.html","id":"identify-the-path-to-your-file","dir":"Articles","previous_headings":"","what":"Identify the path to your file","title":"Revive","text":"revive_xfplate() takes .xlsx output file 96 well XF experiment input. Handling files preferred IDE, RStudio, can challenge. Working within Rstudio project often advisable, can put xlsx files data folder. workflow can use relative paths, example like : Otherwise, Mac might want copy direct path finder path bar, right clicking file copy my_xf_plate.xlsx pathname. need finder path bar set Show .","code":"#not run my_file_path <-    \"/Users/myname/data/my_xf_plate.xlsx\" # mac style path  my_plate <- my_file_path %>% revive_xfplate() #not run my_file_path <- here::here(\"data\", \"my_xf_plate. xlsx\")  my_plate <- my_file_path %>% revive_xfplate()"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/revive.html","id":"run-the-revive-on-an-input--xlsx-file","dir":"Articles","previous_headings":"","what":"Run the revive on an input .xlsx file","title":"Revive","text":"vignette use xlsx file included seahtrue package: .xlsx file read, processed, now can explore output.","code":"my_file_path <-    system.file(\"extdata\",                \"20191219_SciRep_PBMCs_donor_A.xlsx\",                package = \"seahtrue\")  revive_output_donor_A <- my_file_path %>% revive_xfplate() #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data  [1m [36m─ Session info ─────────────────────────────────────────────────────────────── [39m [22m   [3m [90msetting  [39m [23m  [3m [90mvalue [39m [23m  version  R version 4.3.3 (2024-02-29)  os       Ubuntu 22.04.4 LTS  system   x86_64, linux-gnu  ui       X11  language en  collate  C.UTF-8  ctype    C.UTF-8  tz       UTC  date     2024-04-24  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown)   [1m [36m─ Packages ─────────────────────────────────────────────────────────────────── [39m [22m   [3m [90mpackage     [39m [23m  [3m [90m* [39m [23m  [3m [90mversion [39m [23m  [3m [90mdate (UTC) [39m [23m  [3m [90mlib [39m [23m  [3m [90msource [39m [23m  bslib         0.7.0    [90m2024-03-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cachem        1.0.8    [90m2023-05-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cellranger    1.1.0    [90m2016-07-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cli           3.6.2    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  clipr         0.8.0    [90m2022-02-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  colorspace    2.1-0    [90m2023-01-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  desc          1.4.3    [90m2023-12-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  details       0.3.0    [90m2022-03-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  digest        0.6.35   [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  dplyr       * 1.1.4    [90m2023-11-17 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  evaluate      0.23     [90m2023-11-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fansi         1.0.6    [90m2023-12-08 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fastmap       1.1.1    [90m2023-02-24 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fs            1.6.3    [90m2023-07-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  generics      0.1.3    [90m2022-07-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ggplot2       3.5.0    [90m2024-02-23 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  glue          1.7.0    [90m2024-01-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  gtable        0.3.5    [90m2024-04-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  htmltools     0.5.8.1  [90m2024-04-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  httr          1.4.7    [90m2023-08-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  janitor       2.2.0    [90m2023-02-02 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jquerylib     0.1.4    [90m2021-04-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jsonlite      1.8.8    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  knitr         1.46     [90m2024-04-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lifecycle     1.0.4    [90m2023-11-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  logger        0.3.0    [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lubridate     1.9.3    [90m2023-09-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  magrittr      2.0.3    [90m2022-03-30 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  memoise       2.0.1    [90m2021-11-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  munsell       0.5.1    [90m2024-04-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pillar        1.9.0    [90m2023-03-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgconfig     2.0.3    [90m2019-09-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgdown       2.0.9    [90m2024-04-18 [39m  [90m[1] [39m  [1m [35many (@2.0.9) [39m [22m  png           0.1-8    [90m2022-11-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  purrr         1.0.2    [90m2023-08-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  R6            2.5.1    [90m2021-08-19 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ragg          1.3.0    [90m2024-03-13 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  Rcpp          1.0.12   [90m2024-01-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  readxl        1.4.3    [90m2023-07-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rematch       2.0.0    [90m2023-08-30 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rlang         1.1.3    [90m2024-01-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rmarkdown     2.26     [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  sass          0.4.9    [90m2024-03-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  scales        1.3.0    [90m2023-11-28 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  seahtrue    * 0.3.0    [90m2024-04-24 [39m  [90m[1] [39m  [1m [35mlocal [39m [22m  sessioninfo   1.2.2    [90m2021-12-06 [39m  [90m[1] [39m  [1m [35many (@1.2.2) [39m [22m  settings      0.2.7    [90m2021-05-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  snakecase     0.11.1   [90m2023-08-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  stringi       1.8.3    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  stringr       1.5.1    [90m2023-11-14 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  systemfonts   1.0.6    [90m2024-03-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  textshaping   0.3.7    [90m2023-10-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tibble        3.2.1    [90m2023-03-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyr         1.3.1    [90m2024-01-24 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyselect    1.2.1    [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  tidyxl        1.0.10   [90m2023-12-21 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  timechange    0.3.0    [90m2024-01-18 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  utf8          1.2.4    [90m2023-10-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  validate      1.1.5    [90m2024-02-14 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  vctrs         0.6.5    [90m2023-12-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  withr         3.0.0    [90m2024-01-16 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xfun          0.43     [90m2024-03-25 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xml2          1.3.6    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  yaml          2.3.8    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m   [90m [1] /home/runner/work/_temp/Library [39m  [90m [2] /opt/R/4.3.3/lib/R/site-library [39m  [90m [3] /opt/R/4.3.3/lib/R/library [39m   [1m [36m────────────────────────────────────────────────────────────────────────────── [39m [22m"},{"path":"https://vcjdeboer.github.io/seahtrue/articles/seahtrue.html","id":"seahtrue-overview","dir":"Articles","previous_headings":"","what":"Seahtrue overview","title":"Introduction to Seahtrue","text":"seahtrue package offers set functions able perform reproducible data analysis extracellular flux analysis. main function revive_xfplate() reads, preprocess validates input data outputs experimental details outcome variables organized (tidy) way. output revive_xfplate() nested tibble.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/articles/seahtrue.html","id":"extracellular-flux-analysis-scientific-primer","dir":"Articles","previous_headings":"","what":"Extracellular flux analysis scientific primer","title":"Introduction to Seahtrue","text":"instruments Seahorse XF analyzer Agilent, also O2K Oroboros, oyxgraphs (Hansatech instruments example) ReSipher Lucid Scientific, scientists able analyze oxygen consumption living biological samples. Oxygen consumption cells small model organism can provide insights function mitochondria, since mitochondria time main O2 consumers cells. Apart form oxygen consumption Seahorse XF analyzer able analyze parallel extracellular acidification culture medium sample emerged. can proxy glycolytic activity samples. Seahorse extracellular flux instruments performs analysis O2 pH either 96 wells, 24 wells 8 wells, typically O2 pH monitored period around 1 hour, discrete measurements typically 3 minutes . Furthermore, perturbations cellular functional states can induced adding compounds performing assay. common perturbations performed injections oligomycin, fccp anitmycin/rotenone, known mitostress test.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/articles/seahtrue.html","id":"resources","dir":"Articles","previous_headings":"","what":"Resources","title":"Introduction to Seahtrue","text":"Divakaruni, Ajit S., Martin Jastroch. “Practical Guide Analysis, Standardization Interpretation Oxygen Consumption Measurements.” Nature Metabolism 4, . 8 (August 15, 2022): 978–94. https://doi.org/10.1038/s42255-022-00619-4. Gerencser, . ., . Neilson, S. W. Choi, U. Edman, N. Yadava, R. J. Oh, D. . Ferrick, D. G. Nicholls, M. D. Brand. “Quantitative Microplate-Based Respirometry Correction Oxygen Diffusion.” Anal Chem 81, . 16 (August 15, 2009): 6868–78. https://doi.org/10.1021/ac900881z. Janssen, J. J. E., B. Lagerwaard, . Bunschoten, H. F. J. Savelkoul, R. J. J. van Neerven, J. Keijer, V. C. J. de Boer. “Novel Standardized Method Extracellular Flux Analysis Oxidative Glycolytic Metabolism Peripheral Blood Mononuclear Cells.” Sci Rep 11, . 1 (January 18, 2021): 1662. https://doi.org/10.1038/s41598-021-81217-4. Zhang, Xiang, Taolin Yuan, Jaap Keijer, Vincent C. J. de Boer. “OCRbayes: Bayesian Hierarchical Modeling Framework Seahorse Extracellular Flux Oxygen Consumption Rate Data Analysis.” PLOS ONE 16, . 7 (July 15, 2021): e0253926. https://doi.org/10.1371/journal.pone.0253926.","code":" [1m [36m─ Session info ─────────────────────────────────────────────────────────────── [39m [22m   [3m [90msetting  [39m [23m  [3m [90mvalue [39m [23m  version  R version 4.3.3 (2024-02-29)  os       Ubuntu 22.04.4 LTS  system   x86_64, linux-gnu  ui       X11  language en  collate  C.UTF-8  ctype    C.UTF-8  tz       UTC  date     2024-04-24  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown)   [1m [36m─ Packages ─────────────────────────────────────────────────────────────────── [39m [22m   [3m [90mpackage     [39m [23m  [3m [90m* [39m [23m  [3m [90mversion [39m [23m  [3m [90mdate (UTC) [39m [23m  [3m [90mlib [39m [23m  [3m [90msource [39m [23m  bslib         0.7.0    [90m2024-03-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cachem        1.0.8    [90m2023-05-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  cli           3.6.2    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  clipr         0.8.0    [90m2022-02-22 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  desc          1.4.3    [90m2023-12-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  details       0.3.0    [90m2022-03-27 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  digest        0.6.35   [90m2024-03-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  evaluate      0.23     [90m2023-11-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fastmap       1.1.1    [90m2023-02-24 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  fs            1.6.3    [90m2023-07-20 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  htmltools     0.5.8.1  [90m2024-04-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  httr          1.4.7    [90m2023-08-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jquerylib     0.1.4    [90m2021-04-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  jsonlite      1.8.8    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  knitr         1.46     [90m2024-04-06 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  lifecycle     1.0.4    [90m2023-11-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  magrittr      2.0.3    [90m2022-03-30 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  memoise       2.0.1    [90m2021-11-26 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  pkgdown       2.0.9    [90m2024-04-18 [39m  [90m[1] [39m  [1m [35many (@2.0.9) [39m [22m  png           0.1-8    [90m2022-11-29 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  purrr         1.0.2    [90m2023-08-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  R6            2.5.1    [90m2021-08-19 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  ragg          1.3.0    [90m2024-03-13 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rlang         1.1.3    [90m2024-01-10 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  rmarkdown     2.26     [90m2024-03-05 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  sass          0.4.9    [90m2024-03-15 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  sessioninfo   1.2.2    [90m2021-12-06 [39m  [90m[1] [39m  [1m [35many (@1.2.2) [39m [22m  systemfonts   1.0.6    [90m2024-03-07 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  textshaping   0.3.7    [90m2023-10-09 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  vctrs         0.6.5    [90m2023-12-01 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  withr         3.0.0    [90m2024-01-16 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xfun          0.43     [90m2024-03-25 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  xml2          1.3.6    [90m2023-12-04 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m  yaml          2.3.8    [90m2023-12-11 [39m  [90m[1] [39m  [1m [35mRSPM [39m [22m   [90m [1] /home/runner/work/_temp/Library [39m  [90m [2] /opt/R/4.3.3/lib/R/site-library [39m  [90m [3] /opt/R/4.3.3/lib/R/library [39m   [1m [36m────────────────────────────────────────────────────────────────────────────── [39m [22m"},{"path":"https://vcjdeboer.github.io/seahtrue/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincent de Boer. Maintainer, author. Gerwin Smits. Author. Xiang Zhang. Author.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Boer V, Smits G, Zhang X (2024). Seahtrue package extracellular flux analysis. R package version 0.3.0, https://github.com/vcjdeboer/seahtrue.","code":"@Manual{seahtrue-package,   title = {Seahtrue package for extracellular flux analysis},   author = {Vincent {de Boer} and Gerwin Smits and Xiang Zhang},   year = {2024},   note = {R package version 0.3.0},   url = {https://github.com/vcjdeboer/seahtrue}, }"},{"path":"https://vcjdeboer.github.io/seahtrue/index.html","id":"seahtrue-","dir":"","previous_headings":"","what":"Seahtrue revives XF data for structured data analysis","title":"Seahtrue revives XF data for structured data analysis","text":"seahtrue package analyzing extracellular flux data. organizes data excel files nested tibbles allows multi-experiment analysis, detailed raw data processing.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Seahtrue revives XF data for structured data analysis","text":"can install latest version seahtrue following command:","code":"devtools::install_github(\"vcjdeboer/seahtrue\", ref = \"main\")"},{"path":"https://vcjdeboer.github.io/seahtrue/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Seahtrue revives XF data for structured data analysis","text":"need assistance want learn Seahtrue package can utilize documentation page package (?seahtrue). provide links documentation different functions well links general Seahorse background information related package.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/index.html","id":"contributing-and-feedback","dir":"","previous_headings":"","what":"Contributing and Feedback","title":"Seahtrue revives XF data for structured data analysis","text":"Suggestions improvements welcome! feedback Seahtrue package comes improvements bugs, let us know. input valuable can help us make Seahtrue better.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/glue_xfplates.html","id":null,"dir":"Reference","previous_headings":"","what":"Glueing mulltiple plates from a folder — glue_xfplates","title":"Glueing mulltiple plates from a folder — glue_xfplates","text":"function takes folder path available .xlsx files revive_xfplate() function run output one nested tibble.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/glue_xfplates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glueing mulltiple plates from a folder — glue_xfplates","text":"","code":"glue_xfplates(folderpath_seahorse, arg_is_folder)"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/glue_xfplates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glueing mulltiple plates from a folder — glue_xfplates","text":"folderpath_seahorse path folder .xlsx files located vector strings pointing path individual file arg_is_folder either TRUE FALSE. input vector path strings use FALSE, points folder use TRUE","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/glue_xfplates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glueing mulltiple plates from a folder — glue_xfplates","text":"nested tibble files organized row","code":""},{"path":[]},{"path":"https://vcjdeboer.github.io/seahtrue/reference/glue_xfplates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glueing mulltiple plates from a folder — glue_xfplates","text":"","code":"c(     system.file(\"extdata\",         \"20191219_SciRep_PBMCs_donor_A.xlsx\",         package = \"seahtrue\"     ),     system.file(\"extdata\",         \"20200110_SciRep_PBMCs_donor_B.xlsx\",         package = \"seahtrue\"     ),     system.file(\"extdata\",         \"20200110_SciRep_PBMCs_donor_C.xlsx\",         package = \"seahtrue\"     ) ) |>     glue_xfplates(arg_is_folder = FALSE) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data #> → Start function to read seahorse plate data from Excel file: #> 20200110_SciRep_PBMCs_donor_B.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0194115019V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data #> → Start function to read seahorse plate data from Excel file: #> 20200110_SciRep_PBMCs_donor_C.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0194715019V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data #> # A tibble: 3 × 9 #>   plate_id     filepath_seahorse date_run         date_processed      assay_info #>   <chr>        <list>            <chr>            <dttm>              <list>     #> 1 V0174416419V <tibble [1 × 3]>  19-12-2019 17:25 2024-04-24 08:26:14 <tibble>   #> 2 V0194115019V <tibble [1 × 3]>  10-1-2020 16:59  2024-04-24 08:26:24 <tibble>   #> 3 V0194715019V <tibble [1 × 3]>  15-1-2020 17:26  2024-04-24 08:26:35 <tibble>   #> # ℹ 4 more variables: injection_info <list>, raw_data <list>, rate_data <list>, #> #   validation_output <list>"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_output_donor_A.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset PBMC donor A — revive_output_donor_A","title":"Dataset PBMC donor A — revive_output_donor_A","text":"dataset containing output \"20191219_SciRep_PBMCs_donor_A.xlsx\" file. experiment part study published Janssen et al. (2021) Sci rep 11:1662. data PBMCs isolated buffy coats described material methods section  Janssen et al. (2021). .xlsx file result single XF experiment one plate. .xlsx file used input revive_xfplate() function. output function  contains read, preprocessed, validated data form nested tibble. file '20191219_SciRep_PBMCs_donor_A.xlsx' can found inst/extdata directory.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_output_donor_A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset PBMC donor A — revive_output_donor_A","text":"","code":"data(revive_output_donor_A)"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_output_donor_A.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset PBMC donor A — revive_output_donor_A","text":"data frame 1 row 7 variables. plate_id Barcode plate id well plate containing samples filepath_seahorse Path, basename .xlsx file date_run Date time plate run date_processed Date time output revive_xfplate() generated assay_info Meta information 'Assay Configuration' sheet 'Calibration' sheet injection_info Dataframe information 'Operation log' sheet raw_data Preprocessed raw dataframe 'Raw' sheet rate_data Preprocessed rate data 'Rate' sheet validation_output list validation information, output, rules used","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_output_donor_A.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataset PBMC donor A — revive_output_donor_A","text":"Janssen et al. 2021 Sci Rep 11:1162 <https://doi.org/10.1038/s41598-021-81217-4>","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_xfplate.html","id":null,"dir":"Reference","previous_headings":"","what":"Running the read, preprocess and validate — revive_xfplate","title":"Running the read, preprocess and validate — revive_xfplate","text":"function takes Seahorse Wave .xlsx file computes read, validate preprocess","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_xfplate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Running the read, preprocess and validate — revive_xfplate","text":"","code":"revive_xfplate(filepath_seahorse)"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_xfplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Running the read, preprocess and validate — revive_xfplate","text":"filepath_seahorse Absolute path Seahorse Excel file.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_xfplate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Running the read, preprocess and validate — revive_xfplate","text":"preprocessed seahorse dataset returned output. nested tibble following 7 columns: * plate_id = Barcode plate id well plate containing samples * filepath_seahorse = Path, basename .xlsx input file * date_run = Date time plate run * date_processed = Date time output revive_xfplate() generated * assay_info = Meta information 'Assay Configuration' sheet 'Calibration' sheet * injection_info = Dataframe information 'Operation log' sheet * raw_data = Preprocessed raw dataframe 'Raw' sheet * rate_data = Preprocessed rate data 'Rate' sheet # validation_output = Output data checks. including rules","code":""},{"path":[]},{"path":"https://vcjdeboer.github.io/seahtrue/reference/revive_xfplate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Running the read, preprocess and validate — revive_xfplate","text":"","code":"revive_xfplate(     system.file(\"extdata\",         \"20191219_SciRep_PBMCs_donor_A.xlsx\",         package = \"seahtrue\"     ) ) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data #> # A tibble: 1 × 9 #>   plate_id     filepath_seahorse date_run         date_processed      assay_info #>   <chr>        <list>            <chr>            <dttm>              <list>     #> 1 V0174416419V <tibble [1 × 3]>  19-12-2019 17:25 2024-04-24 08:26:45 <tibble>   #> # ℹ 4 more variables: injection_info <list>, raw_data <list>, rate_data <list>, #> #   validation_output <list>"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/seahtrue-package.html","id":null,"dir":"Reference","previous_headings":"","what":"seahtrue: Seahtrue revives XF data for structured data analysis — seahtrue-package","title":"seahtrue: Seahtrue revives XF data for structured data analysis — seahtrue-package","text":"Seahtrue organizes data experiments performed XF analyzer structured nested tibbles. allows detailed processing raw data advanced data visualization statistics. Seahtrue version introduces open reproducible way analyze XF experiments. uses file paths XF Excel files. files created assay result files (.asyr) derived Agilent Seahorse XF Wave software. contain different sheets important data experiment: 1. Assay Information: Details experiment set . 2. Rate Data: Information OCR ECAR rates. 3. Raw Data: original raw data collected experiment. 4. Calibration Data: Data related calibrating instrument. Seahtrue version focuses getting specific data needed analysis. data extracted, prepared calculations preprocessing. make sure everything accurate, initial data preprocessed data go thorough checks.","code":""},{"path":[]},{"path":"https://vcjdeboer.github.io/seahtrue/reference/seahtrue-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"seahtrue: Seahtrue revives XF data for structured data analysis — seahtrue-package","text":"Maintainer: Vincent de Boer vincent.deboer@wur.nl Authors: Gerwin Smits Xiang Zhang","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple revived xf plates into one plot for rate data — sketch_assimilate_rate","title":"Combine multiple revived xf plates into one plot for rate data — sketch_assimilate_rate","text":"plot OCR ECAR plotted per group plate faceted gpgplot","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple revived xf plates into one plot for rate data — sketch_assimilate_rate","text":"","code":"sketch_assimilate_rate(my_df, param = \"OCR\", my_measurements = c(3, 6, 7, 12))"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple revived xf plates into one plot for rate data — sketch_assimilate_rate","text":"my_df tibble generated glue_xfplates() row representing single xf experiment param either \"OCR\" \"ECAR\" my_measurements measurements needs plot. example, c(3,6,7,12) typical mito stress test.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple revived xf plates into one plot for rate data — sketch_assimilate_rate","text":"ggplot object","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple revived xf plates into one plot for rate data — sketch_assimilate_rate","text":"","code":"suppressMessages(     c(         system.file(\"extdata\",             \"20191219_SciRep_PBMCs_donor_A.xlsx\",             package = \"seahtrue\"         ),         system.file(\"extdata\",             \"20200110_SciRep_PBMCs_donor_B.xlsx\",             package = \"seahtrue\"         ),         system.file(\"extdata\",             \"20200110_SciRep_PBMCs_donor_C.xlsx\",             package = \"seahtrue\"         )     ) |>         glue_xfplates(arg_is_folder = FALSE) |>         sketch_assimilate_rate(             param = \"OCR\",             my_measurements = c(3, 4, 9, 12)         ) )"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple revived xf plates into one plot for raw data — sketch_assimilate_raw","title":"Combine multiple revived xf plates into one plot for raw data — sketch_assimilate_raw","text":"plot O2, pH, emission value first measurement point plotted wells xfplates provided function.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple revived xf plates into one plot for raw data — sketch_assimilate_raw","text":"","code":"sketch_assimilate_raw(my_df, param = \"O2_mmHg\")"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple revived xf plates into one plot for raw data — sketch_assimilate_raw","text":"my_df tibble generated glue_xfplates() row representing single xf experiment param either \"O2_mmHg\", \"pH\", \"O2_em_corr\" \"pH_em_corr","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple revived xf plates into one plot for raw data — sketch_assimilate_raw","text":"ggplot object","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_assimilate_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple revived xf plates into one plot for raw data — sketch_assimilate_raw","text":"","code":"suppressMessages(     c(         system.file(\"extdata\",             \"20191219_SciRep_PBMCs_donor_A.xlsx\",             package = \"seahtrue\"         ),         system.file(\"extdata\",             \"20200110_SciRep_PBMCs_donor_B.xlsx\",             package = \"seahtrue\"         ),         system.file(\"extdata\",             \"20200110_SciRep_PBMCs_donor_C.xlsx\",             package = \"seahtrue\"         )     ) |>         glue_xfplates(arg_is_folder = FALSE) |>         sketch_assimilate_raw(param = \"O2_mmHg\") ) #> Picking joint bandwidth of 0.934"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an overview of plate layout, with colored groups — sketch_plate","title":"Make an overview of plate layout, with colored groups — sketch_plate","text":"heatmap style ggplot figure well labeled color group","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an overview of plate layout, with colored groups — sketch_plate","text":"","code":"sketch_plate(xfplate, reorder_legend = FALSE)"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an overview of plate layout, with colored groups — sketch_plate","text":"xfplate `raw_data` `rate_data` tibble generated `revive_xfplate()` function reorder_legend either `TRUE` `FALSE`. `TRUE` groups ordered based number character string group. also adds \"__00\" character string make forcats::refactor(group, parse_number(group)) work.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an overview of plate layout, with colored groups — sketch_plate","text":"ggplot object 96 well plate group layout","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an overview of plate layout, with colored groups — sketch_plate","text":"","code":"system.file(\"extdata\",     \"20191219_SciRep_PBMCs_donor_A.xlsx\",     package = \"seahtrue\" ) |>     revive_xfplate() |>     purrr::pluck(\"raw_data\", 1) |>     sketch_plate(reorder_legend = TRUE) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a plot for the rate data — sketch_rate","title":"Generate a plot for the rate data — sketch_rate","text":"sketch_rate() function uses rate_data generated output revive_xfplate() function. injection info annotated plot, using information form injections provided original experiment. Several options available plot either ECAR/OCR normalize data values normalization cells .xlsx file. number validations performed check whether data can plotted whether layout plot ruined...","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a plot for the rate data — sketch_rate","text":"","code":"sketch_rate(   xf_rate,   param = \"OCR\",   normalize = FALSE,   normalize_unit = \"10000 cells\",   take_group_mean = TRUE,   reorder_legend = FALSE )"},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a plot for the rate data — sketch_rate","text":"xf_rate `rate_data` tibble generated `revive_plate` param Either \"OCR\" \"ECAR\" normalize Either TRUE FALSE normalize_unit string pasted y-axis label normalize = TRUE take_group_mean Either TRUE FALSE reorder_legend Either TRUE FALSE. `TRUE` groups ordered based number character string group. also adds \"__00\" character string make forcats::refactor(group, parse_number(group)) work.","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a plot for the rate data — sketch_rate","text":"ggplot object","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/reference/sketch_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a plot for the rate data — sketch_rate","text":"","code":"system.file(\"extdata\",     \"20191219_SciRep_PBMCs_donor_A.xlsx\",     package = \"seahtrue\" ) |>     revive_xfplate() |>     purrr::pluck(\"rate_data\", 1) |>     sketch_rate(         param = \"OCR\",         reorder_legend = TRUE     ) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data   system.file(\"extdata\",     \"20191219_SciRep_PBMCs_donor_A.xlsx\",     package = \"seahtrue\" ) |>     revive_xfplate() |>     purrr::pluck(\"rate_data\", 1) |>     sketch_rate(         param = \"OCR\",         take_group_mean = FALSE,         reorder_legend = TRUE     ) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data   system.file(\"extdata\",     \"20191219_SciRep_PBMCs_donor_A.xlsx\",     package = \"seahtrue\" ) |>     revive_xfplate() |>     purrr::pluck(\"rate_data\", 1) |>     sketch_rate(         param = \"ECAR\",         normalize = TRUE,         take_group_mean = TRUE,         reorder_legend = TRUE     ) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data   system.file(\"extdata\",     \"20191219_SciRep_PBMCs_donor_A.xlsx\",     package = \"seahtrue\" ) |>     revive_xfplate() |>     purrr::pluck(\"rate_data\", 1) |>     sketch_rate(         param = \"ECAR\",         normalize = TRUE,         take_group_mean = FALSE,         reorder_legend = TRUE     ) #> → Start function to read seahorse plate data from Excel file: #> 20191219_SciRep_PBMCs_donor_A.xlsx #> ℹ Finished collecting assay information. #> → plateid is identified as:V0174416419V #> → Rate was exported WITH background correction #> ℹ Finished preprocessing of the input data #> ℹ Finished validating the input data"},{"path":"https://vcjdeboer.github.io/seahtrue/news/index.html","id":"seahtrue-030","dir":"Changelog","previous_headings":"","what":"seahtrue 0.3.0","title":"seahtrue 0.3.0","text":"Plotting functions now written included. sketch_plate(), sketch_rate(), sketch_assimilate_raw() sketch_assimilate_rate() functions vignettes pkgdown gh pages updated examples use plotting functions","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/news/index.html","id":"seahtrue-020","dir":"Changelog","previous_headings":"","what":"seahtrue 0.2.0","title":"seahtrue 0.2.0","text":"Master function name changed run_seahorse() revive_xfplate() Fixed issue calc_background() summarize/reframe grouped, resulted 48 times inflation rows Complete rework assertions tests performed data Initialized pkgdown style vignettes seahtrue package info docs deployed docs github pages updated data files provided package","code":""},{"path":"https://vcjdeboer.github.io/seahtrue/news/index.html","id":"seahtrue-010","dir":"Changelog","previous_headings":"","what":"seahtrue 0.1.0","title":"seahtrue 0.1.0","text":"Initial first complete release","code":""}]
